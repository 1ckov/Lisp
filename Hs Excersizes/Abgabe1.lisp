 ;;;Aufgabe 1)

 ;;;Punkt 1)
 (defun endnote(pruefungsnote &optional vornote)
    (if(equal vornote NIL)
    (setf arith pruefungsnote)
    (setf arith(/ (+ pruefungsnote  vornote) 2 )))
      (if(< arith pruefungsnote)
      (format t"verbesserte Endnote mit einer Vornote : ~D" arith)
      (format t "Endote wird nicht verbessert"))
 )
(endnote 3 2)

;;;Punkt 2)
(defun endnote2(pruefungsnote &optional (vornote1 0) (vornote2 0))
    (setf arith(/ (+ pruefungsnote vornote1 vornote2) 3))
       (if(and (< vornote1 pruefungsnote) (< vornote2 pruefungsnote))
        (format t "~%verbesserte Endnote mit zwei Vornoten : ~D" arith)
        (format t "~%Endnote wird nicht verbessert"))
    )
   (endnote2 4.0)

;;;Punkt 3)
 (defun notendurchschnitt (listeVonNoten &optional (bonus 0))
   (setf laenge (list-length listeVonNoten))
     (setf summe(reduce ' + listeVonNoten))
     (setf durchschnitt(/ summe laenge))
     (if(< 0.7 (- durchschnitt bonus))
     (setf durchschnitt(- durchschnitt bonus))
     (setf durchschnitt 0.7))
   (format t "~%Notendurchschnitt von ~D Noten : ~D" laenge durchschnitt )
 )
 ;;;(notendurchschnitt '(2 2 1 2 5))

;;;Punkt 4)
 (defun endklausurnote(klausurnote &optional uebeungsnoten)
  (setf laenge (list-length uebeungsnoten))
  (setf sum (reduce '+ uebeungsnoten))
  (if(= laenge 1)
  (setf endnote (+ (* klausurnote 0.9) (* sum 0.1 )))
  (if(= laenge 2)
  (setf endnote (+ (* klausurnote 0.8) (* (/ sum 2) 0.2 )))
  (if(= laenge 3)
  (setf endnote (+ (* klausurnote 0.7) (* (/ sum 3) 0.3 )))
  (if(= laenge 4)
  (setf endnote (+ (* klausurnote 0.6) (* (/ sum 4) 0.4 )))
  (if(> laenge 4)
  (setf endnote (+ (* klausurnote 0.5) (* (/ sum laenge) 0.5 ))))))))
  (format t "~%Endklausurnote mit ~D Uebungsnoten: ~D"  laenge endnote)
 )
 (endklausurnote 3.0 '(1.7 2.0 2 2.3 3))


 ;;;Aufgabe 2)

(defun  mobilep(list)
  (cond ((null list) 0)
        ((atom list) list)
        ((null (cdr list)) (car list))
        ((null (equal( mobilep(cadr list)) ( mobilep(caddr list)))) nil)
        (T (+ (car list)
              ( mobilep (cadr list))
              ( mobilep (caddr list))))))
(print( mobilep '(10 (11 (2 3 3) 8) (9 9 (1 (2 1 1) 4)))))
(print( mobilep '(10 (11 (2 3 3) 8) (9 9 (1 (2 1 1) 44)))))
